/*
Given a m * n matrix mat of ones (representing soldiers) and zeros (representing civilians), return the indexes of the k weakest rows in the matrix ordered from the weakest to the strongest.

A row i is weaker than row j, if the number of soldiers in row i is less than the number of soldiers in row j, or they have the same number of soldiers but i is less than j. Soldiers are always stand in the frontier of a row, that is, always ones may appear first and then zeros.
*/
var kWeakestRows = function(mat, k) {
    let map = new Map();
    let result = [];
    for(let i=0; i<mat.length; i++){
        let rowTotal = mat[i].filter(num=>num===1).length;
        if(!map.has(rowTotal)){
            map.set(rowTotal,[i]);
        }else{
            map.get(rowTotal).push(i);
        }
    }
    let sortKey = [...map.keys()].sort((a,b)=>a-b);

    outer:for(let value of sortKey){
        for(let val of map.get(value)){
            if(k===0){
            break outer;
            }
            result.push(val);
            k--;
        }
    }
    return result;
};
