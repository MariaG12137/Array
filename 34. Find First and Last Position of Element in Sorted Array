/*
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?
*/
var searchRange = function(nums, target) {
    if(nums.length===0){
        return [-1,-1]
    }
    let l = 0; 
    let r = nums.length-1; 
    let index = -1;
    while(l<=r){
        let mid = Math.floor((l+r)/2);
        if(nums[mid]===target){
            index = mid;
            break;
        }
        if(nums[mid]<target){
            l = mid+1;
        }
        if(nums[mid]>target){
            r = mid-1;
        }
    }
    if(index ===-1){
        return [-1,-1];
    }
    let left = index;
    let right = index;
    while(nums[left]===nums[index]){
        left -= 1;
    }
    while(nums[right]===nums[index]){
        right += 1;
    }
    return [left+1,right-1]
};
